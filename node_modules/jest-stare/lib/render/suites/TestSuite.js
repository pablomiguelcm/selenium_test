"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
const Test_1 = require("../tests/Test");
class TestSuite {
    static create(results) {
        const elements = [];
        results.testResults.forEach((testResult) => {
            if (testResult.testResults == null) {
                console.error("Unexpected testResults field missing");
                if (testResult.assertionResults != null) {
                    console.warn("Attempting to use assertionResults: results are unpredictable");
                    testResult.testResults = testResult.assertionResults;
                }
            }
            let testStatusClass;
            const testSectionStatus = new Map();
            for (const result of testResult.testResults) {
                testStatusClass = TestSuite.asignStatus(testStatusClass, result, testSectionStatus);
            }
            if (testStatusClass === undefined) {
                testStatusClass = Constants_1.Constants.PASSED_TEST;
            }
            const accordionCard = TestSuite.buildAccordionCard(testResult, testStatusClass);
            const divMap = new Map();
            testResult.testResults.forEach((test) => {
                const element = Test_1.Test.create(test);
                if (test.ancestorTitles.length > 0) {
                    test.ancestorTitles.forEach((title, index) => {
                        const titlesCopy = test.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSuite.JOIN_CHAR);
                        if (divMap.has(key)) {
                            divMap.get(key).appendChild(element);
                        }
                        else {
                            const nestDiv = document.createElement("div");
                            const statusClass = testSectionStatus.get(key) || Constants_1.Constants.PASSED_TEST;
                            nestDiv.classList.add("my-3", "p-3", "bg-white", "rounded", "box-shadow", statusClass);
                            const h6 = document.createElement("h6");
                            h6.classList.add("border-bottom", "pb-2", "mb-0", "display-6");
                            h6.textContent = title;
                            nestDiv.appendChild(h6);
                            nestDiv.appendChild(element);
                            nestDiv.id = key;
                            divMap.set(key, nestDiv);
                            if (index === 0) {
                                accordionCard.querySelector('.card-body').appendChild(nestDiv);
                            }
                            else {
                                titlesCopy.pop();
                                const parentKey = titlesCopy.join(TestSuite.JOIN_CHAR);
                                divMap.get(parentKey).appendChild(nestDiv);
                            }
                        }
                    });
                }
                else {
                    accordionCard.querySelector('.card-body').appendChild(element);
                }
            });
            elements.push(accordionCard);
        });
        return elements;
    }
    static asignStatus(testStatusClass, result, testSectionStatus) {
        const currentStatus = TestSuite.getStatusClassFromJestStatus(result.status);
        if (!testStatusClass) {
            testStatusClass = currentStatus;
        }
        else if (testStatusClass !== currentStatus) {
            testStatusClass = TestSuite.mixStatus(currentStatus, testStatusClass);
        }
        else {
            testStatusClass = currentStatus;
        }
        for (let index = 0; index < result.ancestorTitles.length; index++) {
            const titlesCopy = result.ancestorTitles.slice();
            titlesCopy.splice(index + 1);
            const key = titlesCopy.join(TestSuite.JOIN_CHAR);
            if (testSectionStatus.has(key)) {
                if (testStatusClass !== currentStatus) {
                    testSectionStatus.set(key, TestSuite.mixStatus(currentStatus, testStatusClass));
                }
                else {
                    testSectionStatus.set(key, currentStatus);
                }
            }
            else {
                testSectionStatus.set(key, currentStatus);
            }
        }
        return testStatusClass;
    }
    static getStatusClassFromJestStatus(jestStatus) {
        if (jestStatus === Constants_1.Constants.TEST_STATUS_PEND) {
            return Constants_1.Constants.PENDING_TEST;
        }
        else if (jestStatus === Constants_1.Constants.TEST_STATUS_FAIL) {
            return Constants_1.Constants.FAILED_TEST;
        }
        else {
            return Constants_1.Constants.PASSED_TEST;
        }
    }
    static mixStatus(currentStatus, oldStatus) {
        const statusArray = oldStatus.split(TestSuite.JOIN_CHAR);
        statusArray.push(currentStatus);
        const sortedUniqueStatusArray = [...new Set(statusArray)].sort();
        return sortedUniqueStatusArray.join(TestSuite.JOIN_CHAR);
    }
    static buildAccordionCard(testResult, testStatusClass) {
        const accordionCard = document.createElement("div");
        accordionCard.classList.add("my-3", "p-3", "bg-white", "rounded", "box-shadow", "card", testStatusClass);
        const cardHeader = TestSuite.buildAccordionCardHeader(testResult.testFilePath, testResult.numPassingTests, testResult.numFailingTests, testResult.numPendingTests);
        accordionCard.appendChild(cardHeader);
        const cardBody = TestSuite.buildAccordionCardBody(testResult.testFilePath);
        accordionCard.appendChild(cardBody);
        return accordionCard;
    }
    static buildAccordionCardHeader(testFilePath, passCount, failCount, pendingCount) {
        const fileName = TestSuite.sanitizeFilePath(testFilePath);
        const cardHeader = document.createElement("div");
        cardHeader.classList.add("card-header");
        cardHeader.id = `${fileName}_header`;
        const h5 = document.createElement("h5");
        h5.classList.add("border-bottom", "pb-2", "mb-0", "display-5");
        const btn = document.createElement("button");
        btn.classList.add("btn", "btn-block");
        btn.setAttribute("data-toggle", "collapse");
        btn.setAttribute("data-target", `#${fileName}_detail`);
        btn.textContent = testFilePath;
        const resultCounts = document.createElement("div");
        const passBadge = document.createElement("span");
        passBadge.classList.add("badge", "badge-success", "border");
        passBadge.textContent = passCount.toString();
        resultCounts.appendChild(passBadge);
        const failBadge = document.createElement("span");
        failBadge.classList.add("badge", "badge-danger", "border");
        failBadge.textContent = failCount.toString();
        resultCounts.appendChild(failBadge);
        const skipBadge = document.createElement("span");
        skipBadge.classList.add("badge", "badge-warning", "border");
        skipBadge.textContent = pendingCount.toString();
        resultCounts.appendChild(skipBadge);
        btn.appendChild(resultCounts);
        h5.appendChild(btn);
        cardHeader.appendChild(h5);
        return cardHeader;
    }
    static buildAccordionCardBody(testFilePath) {
        const fileName = TestSuite.sanitizeFilePath(testFilePath);
        const cardContainer = document.createElement("div");
        cardContainer.classList.add("collapse");
        cardContainer.setAttribute("data-parent", "#accordion");
        cardContainer.id = `${fileName}_detail`;
        const cardBody = document.createElement("div");
        cardBody.classList.add("card-body");
        cardContainer.appendChild(cardBody);
        return cardContainer;
    }
    static sanitizeFilePath(testFilePath) {
        return testFilePath.replace(/(\/)|\\|(:)|(\s)|\.|(@)/g, '_');
    }
}
exports.TestSuite = TestSuite;
TestSuite.JOIN_CHAR = ".";
//# sourceMappingURL=data:application/json;base64,